//LinkedList.h

#pragma once
#include <iostream>
using namespace std;


// declaring node class
template<class T>
class LinkedList {

private:

	struct Node {
		T value;
		Node* next;
	};

	Node* head;

public:

	// default constructor
	LinkedList() : head(nullptr) { }

	// copy constructor
	LinkedList(const LinkedList<T>& rhs);

	// Destroys all the dynamically allocated memory
	// in the list.
	~LinkedList();

	// assignment operator
	const LinkedList<T>& operator=(const LinkedList<T>& rhs);

	// Inserts val at the front of the list
	void insertToFront(const T& val);

	// Prints the LinkedList
	void printList() const;

	// Sets item to the value at position i in this
	// LinkedList and return true, returns false if
	// there is no element i
	bool get(int i, T& item) const;

	// Reverses the LinkedList
	void reverseList();

	// Prints the LinkedList in reverse order
	void printReverse() const;

	// Appends the values of other onto the end of this
	// LinkedList.
	void append(const LinkedList<T>& other);

	// Exchange the contents of this LinkedList with the other one.
	void swap(LinkedList<T>& other);

	// Returns the number of items in the Linked List.
	int size() const;
};

// copy constructor to copy the contents of rhs into this
template<class T>
LinkedList<T>::LinkedList(const LinkedList<T>& rhs)
{
	// this makes the head null
	head = nullptr;
	// let node point to head of rhs
	Node* node = rhs.head;

	// loop that continues till the end of rhs, inserting the elements into the end of this list
	while (node != nullptr)
	{
		insertToFront(node->value);
		node = node->next;
	}
}

// destructor function to delete list compnents
template<class T>
LinkedList<T>::~LinkedList()
{
	while (head != nullptr)
	{
		Node* temp = head;
		head = head->next;
		delete(temp);
	}
}

// assignment operator that copies the contents of rhs into this
template<class T>
const LinkedList<T>& LinkedList<T>::operator=(const LinkedList<T>& rhs)
{

	if (this != &rhs)
	{
		// removes the contents of current list
		while (head != nullptr)
		{
			Node* temp = head;
			head = head->next;
			delete(temp);
		}
		// make curr point to head of rhs
		Node* curr = rhs.head;

		// loop till the end of rhs copying the elements at the end of this list
		while (curr != nullptr)
		{
			insertToFront(curr->value);
			curr = curr->next;
		}
	}

	return *this;
}

// this function inserts the elements at the end of the list
template<class T>
void LinkedList<T>::insertToFront(const T& val)
{
	Node* node = new Node;
	node->value = val;
	node->next = nullptr;
	// empty list
	if (head == nullptr)
		head = node;
	else
	{
		Node* curr = head;
		// loop till the last node of the list
		while (curr->next != nullptr)
			curr = curr->next;
		curr->next = node;
	}
}

// this function prints the list
template<class T>
void LinkedList<T>::printList() const
{
	if (head == nullptr) // empty list
		std::cout << "The list is empty" << std::endl;
	else
	{
		Node* curr = head;
		// loop over the end of the list, print the elements of the list
		while (curr != nullptr)
		{
			std::cout << curr->value << " ";
			curr = curr->next;
		}

		std::cout << std::endl;
	}
}

// function to return the ith position element in item
template<class T>
bool LinkedList<T>::get(int i, T& item) const
{
	// if valid position
	if (i >= 0 && i < size())
	{
		int idx = 0;
		Node* curr = head;
		// loop over the list to get the ith node
		while (idx < i)
		{
			curr = curr->next;
			idx++;
		}

		item = curr->value;
		return true;
	}
	return false; // invalid position
}

// function to reverse the list
template<class T>
void LinkedList<T>::reverseList()
{
	// empty or one element list, return
	if (head != nullptr && head->next != nullptr)
	{
		Node* prev = nullptr; // set prev node to null
		Node* curr = head; // set curr to head
		Node* next;

		// loop till the end of list
		while (curr != nullptr)
		{
			next = curr->next; // set next to node next to curr
			curr->next = prev;
			prev = curr; // make prev point to curr
			curr = next;
		}

		head = prev; // update the new head
	}
}
// function to print the list in reverse
template<class T>
void LinkedList<T>::printReverse() const
{
	LinkedList revList(*this); // make revList to contain same elements as this list
	revList.reverseList(); // reverse the revList
	revList.printList(); // print the revList
}

// function to append the elements of other at the end of this list
template<class T>
void LinkedList<T>::append(const LinkedList<T>& other)
{
	Node* curr = other.head;
	// loop till the end of other inserting the elements at the end of this list
	while (curr != nullptr)
	{
		insertToFront(curr->value);
		curr = curr->next;
	}
}

// function to swap this list and other list contents
template<class T>
void LinkedList<T>::swap(LinkedList<T>& other)
{
	LinkedList tempList(*this);
	*this = other;
	other = tempList;
}

// function to return the size of the list
template<class T>
int LinkedList<T>::size() const
{
	int count = 0;
	Node* curr = head;
	// loop till the end of list counting the elements of the list
	while (curr != nullptr)
	{
		count++;
		curr = curr->next;
	}

	return count;
}

--------------------------------------------------------------------------------------------------------------
//Cointainers.cpp
#include <list>
#include <vector>
#include <algorithm>
#include <iostream>
#include <cassert>
#include "LinkedList.h"
using namespace std;

//----------------------------- Part A ----------------------------- 
void removeOdds(list<int>& li)
{
	auto it = li.begin();
	while (it != li.end()) {
		if (*it % 2 == 1) {
			it = li.erase(it);
		}
		else {
			++it;
		}
	}
}

void test1()
{
	int a[8] = { 2, 8, 5, 6, 7, 3, 4, 1 };
	list<int> x(a, a + 8);
	assert(x.size() == 8 && x.front() == 2 && x.back() == 1);
	removeOdds(x);
	assert(x.size() == 4);
	vector<int> v(x.begin(), x.end());
	sort(v.begin(), v.end());
	int expect[4] = { 2, 4, 6, 8 };
	for (int k = 0; k < 4; k++)
		assert(v[k] == expect[k]);
}

//----------------------------- Part B ----------------------------- 
void removeOdds(vector<int>& v)
{
    int n = v.size();
    int j = 0;
    int totalEven = 0;
    for (int i = 0; i < n; i++)
    {
        if (v[i] % 2 == 0)
        {
            v[j] = v[i];
  
            j++;
            totalEven++;
        }
    }
    v.resize(totalEven);
}

void test2()
{
	int a[8] = { 2, 8, 5, 6, 7, 3, 4, 1 };
	vector<int> x(a, a + 8);
	assert(x.size() == 8 && x.front() == 2 && x.back() == 1);
	removeOdds(x);
	assert(x.size() == 4);
	sort(x.begin(), x.end());
	int expect[4] = { 2, 4, 6, 8 };
	for (int k = 0; k < 4; k++)
		assert(x[k] == expect[k]);
}

//----------------------------- Part C ----------------------------- 
vector<int> destroyedOnes3;

class Movie3
{
public:
	Movie3(int r) : m_rating(r) {}
	~Movie3() { destroyedOnes3.push_back(m_rating); }
	int rating() const { return m_rating; }
private:
	int m_rating;
};

void removeBad(list<Movie3*>& li)
{
	list<Movie3*> temp_list;
	for (list<Movie3*>::iterator it = li.begin(); it != li.end(); it++) {
		Movie3* p = *it;
		if (p->rating() < 50)
			temp_list.push_back(p);
	}
	for (list<Movie3*>::iterator it = temp_list.begin(); it != temp_list.end(); it++) {
		Movie3* p = *it;
		li.remove(p);
		delete p;
	}
}


void test3()
{
	int a[8] = { 85, 80, 30, 70, 20, 15, 90, 10 };
	list<Movie3*> x;
	for (int k = 0; k < 8; k++)
		x.push_back(new Movie3(a[k]));
	assert(x.size() == 8 && x.front()->rating() == 85 && x.back()->rating() == 10);
	removeBad(x);
	assert(x.size() == 4 && destroyedOnes3.size() == 4);
	vector<int> v;
	for (list<Movie3*>::iterator p = x.begin(); p != x.end(); p++)
	{
		Movie3* mp = *p;
		v.push_back(mp->rating());
	}
	sort(v.begin(), v.end());
	int expect[4] = { 70, 80, 85, 90 };
	for (int k = 0; k < 4; k++)
		assert(v[k] == expect[k]);
	sort(destroyedOnes3.begin(), destroyedOnes3.end());
	int expectGone[4] = { 10, 15, 20, 30 };
	for (int k = 0; k < 4; k++)
		assert(destroyedOnes3[k] == expectGone[k]);
}

//----------------------------- Part D ----------------------------- 

vector<int> destroyedOnes4;

class Movie
{
public:
	Movie(int r) : m_rating(r) {}
	~Movie() { destroyedOnes4.push_back(m_rating); }
	int rating() const { return m_rating; }
private:
	int m_rating;
};

void removeBad(vector<Movie*>& v)
{
	for (int index = 0; index < v.size(); index++) {
		if (v[index]->rating() < 50) {
			destroyedOnes4.push_back(v[index]->rating());
			v.erase(v.begin() + index);
			index--;
		}
	}
}

void test4()
{
	int a[8] = { 85, 80, 30, 70, 20, 15, 90, 10 };
	vector<Movie*> x;
	for (int k = 0; k < 8; k++)
		x.push_back(new Movie(a[k]));
	assert(x.size() == 8 && x.front()->rating() == 85 && x.back()->rating() == 10);
	removeBad(x);
	assert(x.size() == 4 && destroyedOnes4.size() == 4);
	vector<int> v;
	for (int k = 0; k < 4; k++)
		v.push_back(x[k]->rating());
	sort(v.begin(), v.end());
	int expect[4] = { 70, 80, 85, 90 };
	for (int k = 0; k < 4; k++)
		assert(v[k] == expect[k]);
	sort(destroyedOnes4.begin(), destroyedOnes4.end());
	int expectGone[4] = { 10, 15, 20, 30 };
	for (int k = 0; k < 4; k++)
		assert(destroyedOnes4[k] == expectGone[k]);
}

int main()
{

    test1();
    cout << "Passed" << endl;

    test2();
    cout << "Passed" << endl;

	test3();
	cout << "Passed" << endl;

	test4();
	cout << "Passed" << endl;
}
