#include <iostream>
#include <string>
#include <cassert>
using namespace std;

using ItemType = string;

struct Node {
    ItemType value;
    Node* next;
};

class LinkedList {

private:
    Node* head = nullptr;

public:

    // default constructor
    LinkedList() : head(nullptr) {  }

    // copy constructor
    LinkedList(const LinkedList& rhs)
    {
        
        Node* p = nullptr;
        Node* other = rhs.head;
        while (other != nullptr)
        {
            Node* newNode = new Node;
            newNode->next = nullptr;
            newNode->value = other->value;
            if (p != nullptr)
                p->next = newNode;
            if (head == nullptr)
                head = newNode;
            p = newNode;
            other = other->next;
        }
    }

    // Destroys all the dynamically allocated memory in the list.
    ~LinkedList()
    {

        for (Node* n = head; n != nullptr;)
        {
            Node* temp = n;
            n = n->next;
            delete temp;
        }
    }

    // assignment operator
    const LinkedList& operator=(const LinkedList& rhs) {
        LinkedList temp(rhs);
        this->swap(temp);
        return *this;
    }

    // Inserts val at the front of the list
    void insertToFront(const ItemType& val)
    {
        Node* newNode = new Node;
        newNode->value = val;
        newNode->next = head;
        head = newNode;
    }

    // Prints the LinkedList
    void printList() const
    {

        for (Node* n = head; n != nullptr; n = n->next)
            cout << n->value << " ";
        cout << endl;

    }

    // Sets item to the value at position i in this
    // LinkedList and return true, returns false if
    // there is no element i
    bool get(int i, ItemType& item) const
    {
        int count = 0;
        for (Node* n = head; n != nullptr; n = n->next)
        {
            if (count == i)
            {
                item = n->value;
                return true;
            }
            count++;
        }
        return false;
    }


    // Reverses the LinkedList
    void reverseList()
    {
        Node* current = head;
        Node* prev = nullptr;

        while (current != nullptr)
        {
            Node* temp = current;
            current = current->next;
            temp->next = prev; //reverses list by setting next pointer to prev
            prev = temp;
        }

        head = prev;
    }

    // Prints the LinkedList in reverse order
    void printReverse() const
    {

        LinkedList copy = LinkedList(*this); 
        Node* current = copy.head;
        Node* prev = nullptr;

        while (current != nullptr) 
        {
            Node* temp = current;
            current = current->next;
            temp->next = prev;
            prev = temp;
        }
        copy.head = prev;
        copy.printList();
    }

    // Appends the values of other onto the end of this LinkedList.
    void append(const LinkedList& other)
    {

        Node* n = head;
        while (n != nullptr)
        {
            if (n->next == nullptr)
                break;
            n = n->next;
        }

        int appendsize = other.size();
        Node* appendhead = other.head;
        for (int i = 0; i < appendsize; i++)
        {
            Node* newNode = new Node; 
            newNode->next = nullptr;
            newNode->value = appendhead->value; 

            n->next = newNode;
            n = n->next;
            appendhead = appendhead->next;
        }
    }

    // Exchange the contents of this LinkedList with the other one.
    void swap(LinkedList& other)
    {
        std::swap(head, other.head);
    }

    // Returns the number of items in the Linked List.
    int size() const
    {
        int count = 0;
        for (Node* n = head; n != nullptr; n = n->next)
            count++;
        return count;
    }
};

int main() {

    LinkedList ls;
    ls.insertToFront("Jack");
    ls.insertToFront("Germaine");
    ls.insertToFront("Agatha");
    ls.insertToFront("Agnes");

    for (int k = 0; k < ls.size(); k++)
    {
        string x;
        ls.get(k, x);
        cout << x << endl;
    }


    LinkedList ls2;
    ls2.insertToFront("George");
    ls2.insertToFront("Louise");
    ls2.insertToFront("Lionel");
    ls2.insertToFront("Helen");

    ls2.printList();
    ls2.printReverse();

    LinkedList e1;
    e1.insertToFront("bell");
    e1.insertToFront("biv");
    e1.insertToFront("devoe");
    LinkedList e2;
    e2.insertToFront("Andre");
    e2.insertToFront("Big Boi");
    e1.append(e2);  // adds contents of e2 to the end of e1
    string s;
    assert(e1.size() == 5 && e1.get(3, s) && s == "Big Boi");
    assert(e2.size() == 2 && e2.get(1, s) && s == "Andre");
    LinkedList e3;
    e3.insertToFront("Rare Essence");
    e3.insertToFront("JunkYard");
    e3.insertToFront("Chuck Brown");
    e3.append(e3);
    assert(e3.size() == 6 && e3.get(3, s) && s == "Chuck Brown");

  
}
