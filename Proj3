// main.cpp
// Portions you are to complete are marked with a TODO: comment.
// We've provided some incorrect return statements (so indicated) just
// to allow this skeleton program to compile and run, albeit incorrectly.
// The first thing you probably want to do is implement the trivial
// functions (marked TRIVIAL).  Then get Arena::display going.  That gives
// you more flexibility in the order you tackle the rest of the functionality.
// As you finish implementing each TODO: item, remove its TODO: comment.

#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include "Robot.h"
#include "Player.h"
#include "Arena.h"
#include "globals.h"
#include "Game.h"
using namespace std;



///////////////////////////////////////////////////////////////////////////
//  Game implementations
///////////////////////////////////////////////////////////////////////////

Game::Game(int rows, int cols, int nRobots)
{
    if (nRobots > MAXROBOTS)
    {
        cout << "***** Trying to create Game with " << nRobots
            << " robots; only " << MAXROBOTS << " are allowed!" << endl;
        exit(1);
    }

    // Create arena
    m_arena = new Arena(rows, cols);

    // Add player
    int rPlayer = 1 + rand() % rows;
    int cPlayer = 1 + rand() % cols;
    m_arena->addPlayer(rPlayer, cPlayer);

    // Populate with robots
    while (nRobots > 0)
    {
        int r = 1 + rand() % rows;
        int c = 1 + rand() % cols;
        // Don't put a robot where the player is
        if (r == rPlayer && c == cPlayer)
            continue;
        m_arena->addRobot(r, c);
        nRobots--;
    }
}

Game::~Game()
{
    delete m_arena;
}

void Game::play()
{
    Player* p = m_arena->player();
    if (p == nullptr)
    {
        m_arena->display("");
        return;
    }
    string msg = "";
    do
    {
        m_arena->display(msg);
        msg = "";
        cout << endl;
        cout << "Move (u/d/l/r/su/sd/sl/sr/c//q): ";
        string action;
        getline(cin, action);
        if (action.size() == 0)
            p->stand();
        else
        {
            switch (action[0])
            {
            default:   // if bad move, nobody moves
                cout << '\a' << endl;  // beep
                continue;
            case 'q':
                return;
            case 'c':  // computer moves player
                msg = p->takeComputerChosenTurn();
                break;
            case 'u':
            case 'd':
            case 'l':
            case 'r':
                p->move(decodeDirection(action[0]));
                break;
            case 's':
                if (action.size() < 2)  // if no direction, nobody moves
                {
                    cout << '\a' << endl;  // beep
                    continue;
                }
                switch (action[1])
                {
                default:   // if bad direction, nobody moves
                    cout << '\a' << endl;  // beep
                    continue;
                case 'u':
                case 'd':
                case 'l':
                case 'r':
                    if (p->shoot(decodeDirection(action[1])))
                        msg = "Hit!";
                    else
                        msg = "Missed!";
                    break;
                }
                break;
            }
        }
        m_arena->moveRobots();
    } while (!m_arena->player()->isDead() && m_arena->robotCount() > 0);
    m_arena->display(msg);
}



///////////////////////////////////////////////////////////////////////////
//  main()
///////////////////////////////////////////////////////////////////////////

int main()
{
    // Initialize the random number generator.  (You don't need to
    // understand how this works.)
    srand(static_cast<unsigned int>(time(0)));

    // Create a game
    // Use this instead to create a mini-game:   Game g(3, 3, 2);
    Game g(15, 18, 80);

    // Play the game
    g.play();
}

------------------------------------------------------------------------------------------------------------------------------------------------
Arena.cpp

#include <iostream>
#include "Arena.h"
#include "globals.h"
#include "Player.h"


///////////////////////////////////////////////////////////////////////////
//  Arena implementations
///////////////////////////////////////////////////////////////////////////

Arena::Arena(int nRows, int nCols)
{
    if (nRows <= 0 || nCols <= 0 || nRows > MAXROWS || nCols > MAXCOLS)
    {
        std :: cout << "***** Arena created with invalid size " << nRows << " by "
            << nCols << "!" << std :: endl;
        exit(1);
    }
    m_rows = nRows;
    m_cols = nCols;
    m_player = nullptr;
    m_nRobots = 0;
}

Arena::~Arena()
{
    // TODO:  Delete the player and all remaining dynamically allocated robots.
}

int Arena::rows() const
{
    // TODO:  TRIVIAL:  Return the number of rows in the arena.
    // Delete the following line and replace it with the correct code.
    return 1;  // This implementation compiles, but is incorrect.
}

int Arena::cols() const
{
    // TODO:  TRIVIAL:  Return the number of columns in the arena.
    // Delete the following line and replace it with the correct code.
    return 1;  // This implementation compiles, but is incorrect.
}

Player* Arena::player() const
{
    return m_player;
}

int Arena::robotCount() const
{
    return m_nRobots;
}

int Arena::nRobotsAt(int r, int c) const
{
    // TODO:  Return the number of robots at row r, column c.
    return 0;  // This implementation compiles, but is incorrect.
}

void Arena::display(std :: string msg) const
{
    // Position (row,col) in the arena coordinate system is represented in
    // the array element grid[row-1][col-1]
    char grid[MAXROWS][MAXCOLS];
    int r, c;

    // Fill the grid with dots
    for (r = 0; r < rows(); r++)
        for (c = 0; c < cols(); c++)
            grid[r][c] = '.';

    // Indicate each robot's position
  // TODO:  If one robot is at some grid point, set the char to 'R'.
  //        If it's 2 though 8, set it to '2' through '8'.
  //        For 9 or more, set it to '9'.

    // Indicate player's position
    if (m_player != nullptr)
    {
        // Set the char to '@', unless there's also a robot there,
        // in which case set it to '*'.
        char& gridChar = grid[m_player->row() - 1][m_player->col() - 1];
        if (gridChar == '.')
            gridChar = '@';
        else
            gridChar = '*';
    }

    // Draw the grid
    clearScreen();
    for (r = 0; r < rows(); r++)
    {
        for (c = 0; c < cols(); c++)
            std::cout << grid[r][c];
        std::cout << std::endl;
    }
    std::cout << std::endl;

    // Write message, robot, and player info
    std::cout << std::endl;
    if (msg != "")
        std::cout << msg << std::endl;
    std::cout << "There are " << robotCount() << " robots remaining." << std::endl;
    if (m_player == nullptr)
        std::cout << "There is no player." << std::endl;
    else
    {
        if (m_player->age() > 0)
            std::cout << "The player has lasted " << m_player->age() << " steps." << std::endl;
        if (m_player->isDead())
            std::cout << "The player is dead." << std::endl;
    }
}

bool Arena::addRobot(int r, int c)
{
    // If MAXROBOTS have already been added, return false.  Otherwise,
    // dynamically allocate a new robot at coordinates (r,c).  Save the
    // pointer to the newly allocated robot and return true.

    // TODO:  Implement this.
    return false;  // This implementation compiles, but is incorrect.
}

bool Arena::addPlayer(int r, int c)
{
    // Don't add a player if one already exists
    if (m_player != nullptr)
        return false;

    // Dynamically allocate a new Player and add it to the arena
    m_player = new Player(this, r, c);
    return true;
}

void Arena::damageRobotAt(int r, int c)
{
    // TODO:  Damage one robot at row r, column c if at least one is there.
    // If the robot does not survive the damage, destroy it.
}

bool Arena::moveRobots()
{
    for (int k = 0; k < m_nRobots; k++)
    {
        // TODO:  Have the k-th robot in the arena make one move.
        //        If that move results in that robot being in the same
        //        position as the player, the player dies.
    }

    // return true if the player is still alive, false otherwise
    return !m_player->isDead();
}

------------------------------------------------------------------------------------------------------------------------------------------------
Player.cpp 
#include <iostream>
#include <string>
#include "globals.h"
#include "Player.h"
#include "Arena.h"
#include "Robot.h"



Player::Player(Arena* ap, int r, int c)
{
    if (ap == nullptr)
    {
        std :: cout << "***** The player must be in some Arena!" << std::endl;
        exit(1);
    }
    if (r < 1 || r > ap->rows() || c < 1 || c > ap->cols())
    {
        std:: cout << "**** Player created with invalid coordinates (" << r
            << "," << c << ")!" << std:: endl;
        exit(1);
    }
    m_arena = ap;
    m_row = r;
    m_col = c;
    m_age = 0;
    m_dead = false;
}

int Player::row() const
{
    return m_row;
}

int Player::col() const
{
    return m_col;
}

int Player::age() const
{
    return m_age; 
}

std :: string Player::takeComputerChosenTurn()
{

    stand();
    return "Stood.";

    if (m_arena->nRobotsAt(m_row, m_col + 1) == 0 && m_arena->nRobotsAt(m_row, m_col - 1) == 0 && m_arena->nRobotsAt(m_row + 1, m_col) == 0 && m_arena->nRobotsAt(m_row - 1, m_col) == 0) //IF NOT SURROUNDED
    {
        if (m_arena->nRobotsAt(m_row, m_col + 2) > 0 || m_arena->nRobotsAt(m_row, m_col - 2) > 0 || m_arena->nRobotsAt(m_row + 2, m_col) > 0 || m_arena->nRobotsAt(m_row - 2, m_col) > 0)
        {
            if (m_arena->nRobotsAt(m_row, m_col + 2) > 0)
            {
                bool status = shoot(RIGHT);
                if (status == true)
                {
                    return "Shot and hit!";
                }
                else
                {
                    return "Shot and missed!";
                }
            }
            if (m_arena->nRobotsAt(m_row, m_col - 2) > 0) 
            {
                bool status = shoot(LEFT);
                if (status == true)
                {
                    return "Shot and hit!";
                }
                else
                {
                    return "Shot and missed!";
                }
            }
            if (m_arena->nRobotsAt(m_row + 2, m_col) > 0) 
            {
                bool status = shoot(DOWN);
                if (status == true)
                {
                    return "Shot and hit!";
                }
                else
                {
                    return "Shot and missed!";
                }
            }
            if (m_arena->nRobotsAt(m_row - 2, m_col) > 0) 
            {
                bool status = shoot(UP);
                if (status == true)
                {
                    return "Shot and hit!";
                }
                else
                {
                    return "Shot and missed!";
                }
            }
        }
        else
        {
            stand();
            return "Stood.";
        }
    }
    else
    {
        if (m_arena->nRobotsAt(m_row + 1, m_col) == 0)
        {
            move(DOWN);
            return "Moved.";
        }
        else if (m_arena->nRobotsAt(m_row - 1, m_col) == 0) 
        {
            move(UP);
            return "Moved.";
        }
        else if (m_arena->nRobotsAt(m_row, m_col + 1) == 0)
        {
            move(RIGHT);
            return "Moved.";
        }
        else if (m_arena->nRobotsAt(m_row, m_col - 1) == 0) 
        {
            move(LEFT);
            return "Moved.";
        }
    }

}

void Player::stand()
{
    m_age++;
}

void Player::move(int dir)
{
    m_age++;
    switch (dir)
    {
    case UP:
        if (m_row > 1)
            m_row--;
        break;
    case DOWN:
        if (m_row < m_arena->rows())
            m_row++;
        break;
    case LEFT:
        if (m_col > 1)
            m_col--;
        break;
    case RIGHT:
        if (m_col < m_arena->cols())
            m_col++;
        break;
    }
}

bool Player::shoot(int dir)
{
    m_age++;

    if (rand() % 3 == 0)
    {
        return false;
    }
    else if (dir == UP)
    {
        int i = 0;
        while (i < MAXSHOTLEN + 1)
        {
            if (m_arena->nRobotsAt(m_row - i, m_col) > 0 && m_row - i > 0)
            {
                m_arena->damageRobotAt(m_row - i, m_col);
                return true;
            }
            i++;
        }
    }
    else if (dir == DOWN)
    {
        int i = 0;
        while (i < MAXSHOTLEN + 1)
        {
            if (m_arena->nRobotsAt(m_row + i, m_col) > 0 && m_row - i > 0)
            {
                m_arena->damageRobotAt(m_row + i, m_col);
                return true;
            }
            i++;
        }
    }
    else if (dir == LEFT)
    {
        int i = 0;
        while (i < MAXSHOTLEN + 1)
        {
            if (m_arena->nRobotsAt(m_row, m_col - i) > 0 && m_col - i > 0)
            {
                m_arena->damageRobotAt(m_row, m_col - i);
                return true;
            }
            i++;
        }
    }
    else if (dir == RIGHT)
    {
        int i = 0;
        while (i < MAXSHOTLEN + 1)
        {
            if (m_arena->nRobotsAt(m_row, m_col + i) > 0 && m_col + i > 0)
            {
                m_arena->damageRobotAt(m_row, m_col + i);
                return true;
            }
            i++;
        }
    }
}

bool Player::isDead() const
{
    return m_dead;
}

void Player::setDead()
{
    m_dead = true;
}

------------------------------------------------------------------------------------------------------------------------------------------------
Robot.cpp
#include <iostream>
#include "Robot.h"
#include "Arena.h"
#include "globals.h"

Robot::Robot(Arena* ap, int r, int c)
{
    if (ap == nullptr)
    {
        std :: cout << "***** A robot must be in some Arena!" << std :: endl;
        exit(1);
    }
    if (r < 1 || r > ap->rows() || c < 1 || c > ap->cols())
    {
        std :: cout << "***** Robot created with invalid coordinates (" << r << ","
            << c << ")!" << std :: endl;
        exit(1);
    }
    m_arena = ap;
    m_row = r;
    m_col = c;
}

int Robot::row() const
{
    return m_row;
}

int Robot::col() const
{
    return m_col;
}

void Robot::move()
{

    switch (rand() % 4)
    {
    case UP:
        if (m_row > 1)
            m_row--;
        break;
    case DOWN:
        if (m_row < m_arena->rows())
            m_row++;
        break;
    case LEFT:
        if (m_col > 1)
            m_col--;
        break;
    case RIGHT:
        if (m_row > 1)
            m_row++;
        break;
    }
}

bool Robot::takeDamageAndLive()
{

    static bool isHit = false;
    if (isHit == false) {
        return false;
    }
    else {
        isHit == true;
        return true;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------
Game.h
#pragma once
class Arena;

class Game
{
public:
    // Constructor/destructor
    Game(int rows, int cols, int nRobots);
    ~Game();

    // Mutators
    void play();

private:
    Arena* m_arena;
};

------------------------------------------------------------------------------------------------------------------------------------------------
Arena.h
#pragma once
#include <string>
#include "globals.h"

class Player;
class Robot;


class Arena
{
public:
    // Constructor/destructor
    Arena(int nRows, int nCols);
    ~Arena();

    // Accessors
    int     rows() const;
    int     cols() const;
    Player* player() const;
    int     robotCount() const;
    int     nRobotsAt(int r, int c) const;
    void    display(std :: string msg) const;

    // Mutators
    bool   addRobot(int r, int c);
    bool   addPlayer(int r, int c);
    void   damageRobotAt(int r, int c);
    bool   moveRobots();

private:
    int     m_rows;
    int     m_cols;
    Player* m_player;
    Robot* m_robots[MAXROBOTS];
    int     m_nRobots;
};

------------------------------------------------------------------------------------------------------------------------------------------------
Player.h
#pragma once
#include <string>

class Arena;

class Player
{
public:
    // Constructor
    Player(Arena* ap, int r, int c);

    // Accessors
    int  row() const;
    int  col() const;
    int  age() const;
    bool isDead() const;

    // Mutators
    std :: string takeComputerChosenTurn();
    void   stand();
    void   move(int dir);
    bool   shoot(int dir);
    void   setDead();

private:
    Arena* m_arena;
    int    m_row;
    int    m_col;
    int    m_age;
    bool   m_dead;
};

------------------------------------------------------------------------------------------------------------------------------------------------
Robot.h
#pragma once

class Arena;  // This is needed to let the compiler know that Arena is a
// type name, since it's mentioned in the Robot declaration.

class Robot
{
public:
    // Constructor
    Robot(Arena* ap, int r, int c);

    // Accessors
    int  row() const;
    int  col() const;

    // Mutators
    void move();
    bool takeDamageAndLive();

private:
    Arena* m_arena;
    int    m_row;
    int    m_col;
};
 
------------------------------------------------------------------------------------------------------------------------------------------------
globals.h
#pragma once

///////////////////////////////////////////////////////////////////////////
// Manifest constants
///////////////////////////////////////////////////////////////////////////

const int MAXROWS = 20;             // max number of rows in the arena
const int MAXCOLS = 40;             // max number of columns in the arena
const int MAXROBOTS = 130;          // max number of robots allowed
const int MAXSHOTLEN = 5;           // max number of steps you can shoot

const int UP = 0;
const int DOWN = 1;
const int LEFT = 2;
const int RIGHT = 3;


///////////////////////////////////////////////////////////////////////////
//  Auxiliary function declarations
///////////////////////////////////////////////////////////////////////////

int decodeDirection(char dir);
void clearScreen();

------------------------------------------------------------------------------------------------------------------------------------------------
utilities.cpp
#include "globals.h"

///////////////////////////////////////////////////////////////////////////
//  Auxiliary function implementations
///////////////////////////////////////////////////////////////////////////


int decodeDirection(char dir)
{
    switch (dir)
    {
    case 'u':  return UP;
    case 'd':  return DOWN;
    case 'l':  return LEFT;
    case 'r':  return RIGHT;
    }
    return -1;  // bad argument passed in!
}

///////////////////////////////////////////////////////////////////////////
//  clearScreen implementations
///////////////////////////////////////////////////////////////////////////

// DO NOT MODIFY OR REMOVE ANY CODE BETWEEN HERE AND THE END OF THE FILE!!!
// THE CODE IS SUITABLE FOR VISUAL C++, XCODE, AND g++ UNDER LINUX.

// Note to Xcode users:  clearScreen() will just write a newline instead
// of clearing the window if you launch your program from within Xcode.
// That's acceptable.

#ifdef _MSC_VER  //  Microsoft Visual C++

#include <windows.h>

void clearScreen()
{
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    GetConsoleScreenBufferInfo(hConsole, &csbi);
    DWORD dwConSize = csbi.dwSize.X * csbi.dwSize.Y;
    COORD upperLeft = { 0, 0 };
    DWORD dwCharsWritten;
    FillConsoleOutputCharacter(hConsole, TCHAR(' '), dwConSize, upperLeft,
        &dwCharsWritten);
    SetConsoleCursorPosition(hConsole, upperLeft);
}

#else  // not Microsoft Visual C++, so assume UNIX interface

#include <cstring>
#include <iostream>

void clearScreen()  // will just write a newline in an Xcode output window
{
    static const char* term = getenv("TERM");
    if (term == nullptr || strcmp(term, "dumb") == 0)
        std::cout << std::endl;
    else
    {
        static const char* ESC_SEQ = "\x1B[";  // ANSI Terminal esc seq:  ESC [
        std::cout << ESC_SEQ << "2J" << ESC_SEQ << "H" << std::flush;
    }
}

#endif
------------------------------------------------------------------------------------------------------------------------------------------------
